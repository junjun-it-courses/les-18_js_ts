// Boolean
// Наиболее базовым типом является логический ture/false, который в Javascript и Typescript называется boolean.

// let isDone: boolean = false;


// Number
// Как и в Javascript, тип numbers в Typescript являются числом с плавающей точкой.


// let decimal: number = 6;
// const num: number = 100;


// String
// Еще одна важная часть программ в веб-страницах и серверах это текстовые данные.
// Как и в других языках, в Typescript используется то же обозначение "string" для таких данных.
// Как и Javascript, в Typescript используются двойные (") или одинарные (') кавычки для обрамления текстовых данных.

// let userName: string = "bob";
// userName = 'smith';

// Array #
// TypeScript, как и JavaScript, имеет массивы значений.
// Тип массива может быть определен одним из двух способов.
// Первый - обозначать тип элементов массива перед []:

// let list: number[] = [1, 2, 3];

// Второй способ - использовать обобщение Array<elemType>:

// let list2: Array<number> = [1, 2, 3];

// Tuple #
// Тип Tuple дает вам возможность объявить массив с известным фиксированным количеством элементов,
// которые не обязаны быть одного типа.
// Например, вы хотите иметь значение Tuple как пару "строка" и "число":


// Объявление типа tuple
// let x: [string, number];
// Его инициализация
// x = ['hello', 10]; // OK
// Некорректная инициализация вызовет ошибку
// x = [10, 'hello']; // Error

// Any#
// Нам может потребоваться описать тип переменных, который мы не знаем, когда пишем наше приложение.
// Эти значения могут быть получены из динамического контента, например от пользователя или от сторонней библиотеки.
//  В этих случаях мы хотим отключить проверку типов и позволить значениям пройти проверку на этапе компиляции.
// Чтобы это сделать, нужно использовать тип any:


// let notSure: any = 4;
// notSure = "maybe a string instead";
// notSure = false; // ok, это определенно boolean